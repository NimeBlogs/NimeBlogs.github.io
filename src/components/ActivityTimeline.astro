---
// ActivityTimeline.astro
interface Props {
  activities: Array<{
    id: string;
    type: string;
    icon?: string;
    date: string;
    title?: string;
    description?: string;
    link?: string;
    image?: string;
  }>;
}

const { activities } = Astro.props;

// 工具函数
function formatDate(dateString: string): string {
  const date = new Date(dateString);
  return date.toLocaleDateString('zh-CN', { month: 'short', day: 'numeric' });
}

function getRelativeDate(dateString: string): string {
  const date = new Date(dateString);
  const now = new Date();
  const diffInDays = Math.floor((now.getTime() - date.getTime()) / (1000 * 60 * 60 * 24));
  
  if (diffInDays === 0) return '今天';
  if (diffInDays === 1) return '昨天';
  if (diffInDays < 7) return `${diffInDays}天前`;
  if (diffInDays < 30) return `${Math.floor(diffInDays / 7)}周前`;
  if (diffInDays < 365) return `${Math.floor(diffInDays / 30)}个月前`;
  return `${Math.floor(diffInDays / 365)}年前`;
}

function getIconByType(type?: string, customIcon?: string): string {
  if (customIcon) return customIcon;
  switch (type) {
    case 'post': return 'file-text';
    case 'update': return 'refresh-cw';
    case 'event': return 'calendar';
    case 'milestone': return 'star';
    default: return 'activity';
  }
}

function getColorByType(type?: string): string {
  switch (type) {
    case 'post': return 'text-blue-500';
    case 'update': return 'text-green-500';
    case 'event': return 'text-purple-500';
    case 'milestone': return 'text-amber-500';
    default: return 'text-primary';
  }
}

function getRandomBgColor(id: string): string {
  const colors = [
    'bg-blue-100 dark:bg-blue-900/30',
    'bg-green-100 dark:bg-green-900/30',
    'bg-purple-100 dark:bg-purple-900/30',
    'bg-pink-100 dark:bg-pink-900/30',
    'bg-amber-100 dark:bg-amber-900/30',
    'bg-cyan-100 dark:bg-cyan-900/30',
    'bg-emerald-100 dark:bg-emerald-900/30',
    'bg-indigo-100 dark:bg-indigo-900/30'
  ];
  
  // 使用ID生成一个一致的索引
  let hash = 0;
  for (let i = 0; i < id.length; i++) {
    hash = id.charCodeAt(i) + ((hash << 5) - hash);
  }
  return colors[Math.abs(hash) % colors.length];
}

// 排序活动
const sortedActivities = [...activities].sort((a, b) => 
  new Date(b.date).getTime() - new Date(a.date).getTime()
);
---

<div class="space-y-8 pl-12">
  {sortedActivities.map((activity, index) => {
    const icon = getIconByType(activity.type, activity.icon);
    const color = getColorByType(activity.type);
    const dateStr = formatDate(activity.date);
    const fullDate = getRelativeDate(activity.date);
    const bgColor = getRandomBgColor(activity.id);
    
    // 简化类型名称显示
    let typeDisplay = '动态';
    if (activity.type) {
      switch (activity.type) {
        case 'post': typeDisplay = '发布'; break;
        case 'update': typeDisplay = '更新'; break;
        case 'event': typeDisplay = '事件'; break;
        case 'milestone': typeDisplay = '里程碑'; break;
        default: typeDisplay = activity.type.charAt(0).toUpperCase() + activity.type.slice(1);
      }
    }
    
    // 动画延迟
    const animationDelay = index * 0.1 + 's';
    
    // 节点颜色
    let dotColorClass = 'border-primary';
    switch (activity.type) {
      case 'post': dotColorClass = 'border-blue-500'; break;
      case 'update': dotColorClass = 'border-green-500'; break;
      case 'event': dotColorClass = 'border-purple-500'; break;
      case 'milestone': dotColorClass = 'border-amber-500'; break;
    }
    
    // 构建类名
    const avatarClass = bgColor + ' w-12 h-12 rounded-full flex items-center justify-center ring-4 ring-white/50 dark:ring-gray-800/50 shadow-sm';
    const iconClass = color + ' w-6 h-6';
    
    return (
      <div 
        key={activity.id} 
        class="relative animate-fadeIn"
        style={{animationDelay: animationDelay}}
      >
        {/* 时间轴节点 */}
        <div class="absolute -left-12 top-1 flex items-center justify-center">
          <div class="absolute w-6 h-6 rounded-full bg-primary/10 dark:bg-primary/15 animate-ping opacity-75"></div>
          <div class={"w-3 h-3 rounded-full bg-white dark:bg-gray-800 border-2 " + dotColorClass + " shadow-md z-10"}></div>
          
          {/* 时间标签 */}
          <div class="ml-3 bg-white dark:bg-gray-800 px-3 py-1 rounded-full text-xs font-medium text-neutral-600 dark:text-neutral-300 shadow-sm whitespace-nowrap">
            {dateStr}
          </div>
        </div>
        
        {/* 动态卡片 */}
        <div class="card-base p-6 rounded-[var(--radius-large)] bg-white dark:bg-gray-800/80 backdrop-blur-sm shadow-sm hover:shadow-lg transition-all duration-300 transform hover:-translate-y-1 border border-neutral-100 dark:border-neutral-700">
          {/* 头部：头像、姓名、时间 */}
          <div class="flex items-center justify-between mb-4">
            <div class="flex items-center gap-3">
              <div class={avatarClass}>
                <Icon name={icon} class={iconClass} />
              </div>
              <div>
                <h3 class="font-bold text-neutral-900 dark:text-white">作者动态</h3>
                <div class="flex items-center gap-1 text-xs text-neutral-500 dark:text-neutral-400">
                  <span>{fullDate}</span>
                  <span>•</span>
                  <span class={color}>{typeDisplay}</span>
                </div>
              </div>
            </div>
            
            {/* 类型标签 */}
            <div class="px-2.5 py-1 rounded-full text-xs font-medium bg-neutral-100 dark:bg-gray-700 text-neutral-600 dark:text-neutral-300">
              {typeDisplay}
            </div>
          </div>
          
          {/* 内容 */}
          <div class="space-y-3">
            {/* 链接 */}
            {activity.link && (
              <a href={activity.link} target="_blank" rel="noopener noreferrer" class="inline-flex items-center text-sm font-medium text-primary hover:text-primary/80 transition-colors">
                <Icon name="external-link" class="w-4 h-4 mr-1" />
                {activity.link.replace('https://', '').replace('http://', '').split('/')[0]}
              </a>
            )}
            
            {/* 标题 */}
            {activity.title && (
              <h4 class="text-lg font-semibold text-neutral-900 dark:text-white">{activity.title}</h4>
            )}
            
            {/* 描述 */}
            {activity.description && (
              <p class="text-neutral-600 dark:text-neutral-300 line-clamp-2">{activity.description}</p>
            )}
            
            {/* 图片 */}
            {activity.image && (
              <div class="rounded-lg overflow-hidden shadow-sm border border-neutral-100 dark:border-neutral-700">
                <img 
                  src={activity.image} 
                  alt={activity.title || '活动图片'} 
                  class="w-full h-auto object-cover transition-transform hover:scale-105 duration-500"
                  loading="lazy"
                />
              </div>
            )}
          </div>
        </div>
      </div>
    );
  })}
</div>